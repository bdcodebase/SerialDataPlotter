# viewer for the csv files written by SerialDataPlotter
# almost entirely generated by Github Copilot in a session of some minutes, only minor adjustments
import sys
import pandas as pd
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QAction, QInputDialog, QWidget, QVBoxLayout
import pyqtgraph as pg
import pyqtgraph

class CSVPlotter(QMainWindow):
    def __init__(self):
        super().__init__()

        self.delimiter = ";"  # Default delimiter
        self.foreground_color = 'k'  # Default foreground color
        self.background_color = 'w'  # Default background color
        self.grid_visible = True  # Default grid visibility

        #self.pen_colors = ['b', 'g', 'r', 'c', 'm', 'y', 'w']  # Default pen colors
        # Pen colors for white background
        self.pen_colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']
        self.initUI()

    def initUI(self):
        self.setWindowTitle('CSV Plotter')
        self.setGeometry(100, 100, 800, 600)

        # Create a menu bar
        menubar = self.menuBar()
        fileMenu = menubar.addMenu('File')

        # Add open file action
        openFile = QAction('Open CSV', self)
        openFile.triggered.connect(self.openFileDialog)
        fileMenu.addAction(openFile)

        # Add set delimiter action
        setDelimiter = QAction('Set Delimiter', self)
        setDelimiter.triggered.connect(self.setDelimiterDialog)
        fileMenu.addAction(setDelimiter)

        # Create a central widget and layout
        self.centralWidget = QWidget()
        self.setCentralWidget(self.centralWidget)
        self.layout = QVBoxLayout(self.centralWidget)

    def openFileDialog(self):
        options = QFileDialog.Options()
        fileName, _ = QFileDialog.getOpenFileName(self, "Open CSV File", "", "CSV Files (*.csv);;All Files (*)", options=options)
        if fileName:
            self.plotCSV(fileName)

    def setDelimiterDialog(self):
        delimiter, ok = QInputDialog.getText(self, 'Input Delimiter', 'Enter the delimiter:')
        if ok:
            self.delimiter = delimiter

    def plotCSV(self, fileName):
        # Clear the layout
        while self.layout.count():
            child = self.layout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()

        # Read CSV file
        data = pd.read_csv(fileName, delimiter=self.delimiter)

        # Create a list to hold all plot widgets
        plotWidgets = []

        # Check if the first row contains column labels
        if all(isinstance(col, str) for col in data.columns):
            for i, column in enumerate(data.columns):
                plotWidget = pg.PlotWidget()
                plotWidget.setBackground(self.background_color)
                plotWidget.getAxis('left').setPen(self.foreground_color)
                plotWidget.getAxis('bottom').setPen(self.foreground_color)
                plotWidget.showGrid(x=self.grid_visible, y=self.grid_visible)
                pen_color = self.pen_colors[i % len(self.pen_colors)]
                plotWidget.plot(data.index, data[column], pen=pen_color, name=column)
                plotWidget.setLabel('left', column, color=self.foreground_color)
                if i == len(data.columns) - 1:
                    plotWidget.setLabel('bottom', 'Samples', color=self.foreground_color)
                self.layout.addWidget(plotWidget)
                plotWidgets.append(plotWidget)
        else:
            for i, column in enumerate(data.columns):
                plotWidget = pg.PlotWidget()
                plotWidget.setBackground(self.background_color)
                plotWidget.getAxis('left').setPen(self.foreground_color)
                plotWidget.getAxis('bottom').setPen(self.foreground_color)
                plotWidget.showGrid(x=self.grid_visible, y=self.grid_visible)
                pen_color = self.pen_colors[i % len(self.pen_colors)]
                plotWidget.plot(data.index, data[column], pen=pen_color, name=f'Column {i+1}')
                plotWidget.setLabel('left', f'Column {i+1}', color=self.foreground_color)
                if i == len(data.columns) - 1:
                    plotWidget.setLabel('bottom', 'Samples', color=self.foreground_color)
                self.layout.addWidget(plotWidget)
                plotWidgets.append(plotWidget)

        # Link all x-axes
        for plotWidget in plotWidgets[1:]:
            plotWidget.setXLink(plotWidgets[0])

if __name__ == '__main__':
    app =  pyqtgraph.Qt.mkQApp() #QApplication(sys.argv) # to prevent broken axes on second screen. manually changed, all other code is generated by Github Cobilot in a session of some minutes
    ex = CSVPlotter()
    ex.show()
    sys.exit(app.exec_())